# app/models.py

from pydantic import BaseModel, Field
from typing import List, Optional

# ==============================================================================
# 1. Models for Incoming API Requests
# ==============================================================================

class JourneyRequest(BaseModel):
    """
    Defines the structure for incoming requests to the /generate-journey endpoint.
    This ensures the data from the frontend is valid before we process it.
    """
    latitude: float = Field(
        ..., # The '...' means this field is required.
        description="The user's current latitude. Provided by the phone's GPS."
    )
    longitude: float = Field(
        ...,
        description="The user's current longitude. Provided by the phone's GPS."
    )
    city: str = Field(
        ...,
        description="The city the user is currently in, e.g., 'Enugu'. This helps filter knowledge base results."
    )
    query: str = Field(
        ...,
        description="The user's high-level goal or interest, e.g., 'Find the best street food' or 'Show me some history'."
    )
    destination_poi_id: str = Field(
        ...,
        description="The unique ID of the Point of Interest (POI) the user has selected as their destination. This ID comes from our MongoDB database."
    )


# ==============================================================================
# 2. Models for Structuring LLM Output
# ==============================================================================

class JourneyNarrative(BaseModel):
    """
    Defines the desired JSON structure for the AI's response.
    We use this with LangChain's PydanticOutputParser to force Gemini
    to return a predictable, structured object instead of just plain text.
    """
    title: str = Field(
        description="A short, catchy title for the journey, like 'The Spice Route of Enugu' or 'A Walk Through History'."
    )
    narrative: str = Field(
        description="The main story for the user's walk. It should be 2-4 sentences long, engaging, and weave together the user's goal with local context."
    )
    fun_fact: str = Field(
        description="A single, interesting, and brief fun fact related to the user's location or journey. Must be a complete sentence."
    )
    location_awareness: str = Field(
        description="A single sentence that makes the user feel seen, mentioning a nearby landmark or street to show the AI is aware of their surroundings."
    )


# ==============================================================================
# 3. Models for Outgoing API Responses
# ==============================================================================

class JourneyResponse(BaseModel):
    """
    Defines the final JSON structure our API will send back to the frontend.
    This acts as a clear "contract" so the frontend team knows exactly what data to expect.
    """
    structured_narrative: JourneyNarrative = Field(
        description="The structured story object generated by the AI."
    )
    route_data: dict = Field(
        description="The complete, raw JSON object received from the MapTiler Directions API. The frontend will use this to draw the route on the map."
    )

